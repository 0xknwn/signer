import NavBar from "../components/navbar";
import Markdown from "markdown-to-jsx";
import { useState } from "react";

const content = `
# Transactions

On that screen you should have selected the network and account you are using.
This screen enable you to enter a set of calls. Once done, it helps to build and
execute a transaction based on it.

## Enter a multicall

For now, copy/paste a list of call as they would be generated by the dapp. So
far, I assume it would be made of contract addresses, selector hash and
parameter values

## Generate the payload

The signer should generate the payload based on the multicall that has been
provided and the account that is being used.

## Estimate the fees

The signer should be able to provide an estimate of the cost as well as the
maximum fee that will be used

## Sign and submit the transaction

Assuming the user wants to submit the transaction to the network, signer should
sign the transaction and submit it to the network

## Monitor the execution

Transactions that have been submitted should be monitored for executions

## Report (Receipt) the transaction

Once the transaction has succeeded or failed, it should remain in the history of
transactions

## \`\`**\`\` Later \`\`**\`\`  Reverse Engineer the transaction

This could be an added value to help the user understand what the transaction is
doing. A good source of inspiration for the associated feature could be this
document by Ledger, i.e.
[Enhancing Security through Clear Signing](https://developers.ledger.com/docs/clear-signing/getting-started).
Among the feature that we could provide, we could:

- Check if the contract sources are available and if the binaries matches the
  sources
- Check if the contract has been audited
- Provide a description, i.e. text associated with what the contract does
- Reverse Engineer the selector to provide the methods that are being used
- Provide a description of the function being called, i.e. a text associated
  with that selector
- Reverse Engineer the parameter values to show what the values are
- Provide a description for each one of the parameters, i.e. a text associated
  with every selector
- Integrate ChatGPT or another LLM and say what the function is supposed to do.
  For details of what we can do with the application
- Assess the risk of running the transaction
`;

function Transactions() {
  const [help, setHelp] = useState(false);

  const activateLasers = () => {
    setHelp(!help);
  };

  return (
    <>
      <NavBar />
      <h1>Transactions</h1>
      <button onClick={activateLasers}>
        {help ? "Hide help" : "Show help"}
      </button>
      {help ? (
        <Markdown>{content}</Markdown>
      ) : (
        "Oops! This page is under construction."
      )}
    </>
  );
}

export default Transactions;
